name: Run All Tests

on:
  workflow_dispatch:
env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

jobs:
  get-projects-list:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      projects-length: ${{ steps.set-matrix.outputs.length }}
    steps:
      - name: Set projects matrix
        id: set-matrix
        run: |
          PROJECTS='["testing_activemq","testing_amqp","testing_artemis","testing_azure","testing_csv","testing_ehcache","testing_excel","testing_exec","testing_expression","testing_failover","testing_filesystem","testing_flatfile","testing_flyway","testing_healthcheck","testing_http","testing_jclouds","testing_json","testing_jsr107_cache","testing_kafka","testing_mail","testing_mongodb","testing_mqtt","testing_nats","testing_pdf","testing_pgp","testing_restful","testing_rest_metrics","testing_solace","testing_solace_jmx","testing_sshtunnel","testing_stax","testing_swift","testing_triggered","testing_vcs_git","testing_webservice_cxf"]'
          echo "matrix={\"project\":$PROJECTS}" >> $GITHUB_OUTPUT
          echo "length=$(echo $PROJECTS | jq '. | length')" >> $GITHUB_OUTPUT

  set-max-parallel:
    runs-on: ubuntu-latest
    needs: get-projects-list
    outputs:
      max_parallel: ${{ steps.calc.outputs.max_parallel }}
    steps:
      - id: calc
        run: |
          echo "max_parallel=$((${{ needs.get-projects-list.outputs.projects-length }} / 2))" >> $GITHUB_OUTPUT

  run-tests:
    needs: [get-projects-list, set-max-parallel]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.get-projects-list.outputs.matrix)}}
      fail-fast: false
      max-parallel: ${{ fromJson(needs.set-max-parallel.outputs.max_parallel) }}
    
    steps:
    - name: Debug Info
      run: |
        echo "Checking out repository: interlok-testing/${{ matrix.project }}"

    - name: Manual Git Clone
      run: |
        echo "Cloning repository..."
        git clone https://github.com/interlok-testing/${{ matrix.project }}.git .
        
        echo "Using default branch:"
        git checkout $(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
        
        echo "Current branch:"
        git branch --show-current

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Run Gradle tests
      run: |
        ./gradlew functionalTest
      #continue-on-error: true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.project }}
        path: |
          build/reports
          build/test-results

  summarize-results:
    needs: run-tests
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4

    - name: Display structure of downloaded files
      run: ls -R

    - name: Summarize test results
      run: |
        echo "Test Results Summary:" > summary.txt
        for dir in test-results-*; do
          project=${dir#test-results-}
          if [ -f "$dir/reports/html/TESTS-*.xml" ]; then
            result=$(grep "failures=\"0\"" "$dir/reports/html/TESTS-*.xml" > /dev/null && echo "PASSED" || echo "FAILED")
          else
            result="NO RESULTS"
          fi
          echo "$project: $result" >> summary.txt
        done
        cat summary.txt

    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: summary.txt
